#
# Yet Another UserAgent Analyzer
# Copyright (C) 2013-2019 Niels Basjes
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
config:

# =============================
# Use all Step functions
# Needed to verify serialization
# =============================

# FIXME: DROP THIS FILE WHEN FINISHED DEVELOPING THIS

#- matcher:
#    options:
#    - 'verbose'
##    variable:
##    - 'Foo: agent.product.name^.version'
#    require:
#      - 'agent.(1)product.(1)name="Foo"'
#
#    #    - 'agent.(6)product.name{"StartsWithThis"'    #path{value
##    - 'agent.(4-5)product.name="IsThisExactly"'   #path=value
##    - 'agent.(2-3)product.name[-3]="123"'         #path[n]=value
##    - 'agent.(1)product.name'                     #path          exists
#    extract:
##    - 'Foo: 1 : @Foo^.comments.entry.product.version'
#      - 'Fixed                :    1 : "Fixed"'
#      - 'Agent                :    1 : agent'
#      - 'AgentProduct1        :    1 : agent.(1)product'
#      - 'AgentProduct2        :    1 : agent.(2)product'
#      - 'AgentProduct         :    1 : agent.(1)product'
#      - 'AgentProductName     :    1 : agent.(1)product.(1)name'
#      - 'AgentProductVersion  :    1 : agent.(1)product.(1)version'
#      - 'AgentProductComments :    1 : agent.(1)product.(1)version^.comments.entry.product.name="FooComment"'

#- test:
#    options:
#    - 'verbose'
#    input:
#       user_agent_string                    : 'Foo/1.0 (FooComment/2) Bar/3 (BarComment/4)'
#    expected:
##        Foo : 'Foos'
#      Fixed                             : 'Fixed'
#      Agent                                 : 'Foo/1.0 (FooComment/2) Bar/3 (BarComment/4)'
#      AgentProduct1                         : 'Foo/1.0 (FooComment/2)'
#      AgentProduct2                         : 'Bar/3 (BarComment/4)'
#      AgentProduct                         : 'Foo/1.0 (FooComment/2)'
#      AgentProductName                     : 'Foo'
#      AgentProductVersion                  : '1.0'
#      AgentProductComments                 : 'FooComment'

#- matcher:
#    options:
#      - 'verbose'
#    extract:
#        - 'StartsT:   1:  agent.(1)product.(1)comments.(1-5)entry.product.(1)name{"T"^.version'
#
#- matcher:
#    options:
#      - 'verbose'
#    extract:
#        - 'StartsTh:   1:  agent.(1)product.(1)comments.(1-5)entry.product.(1)name{"Th"^.version'
#
#
#- test:
#    options:
#      - 'verbose'
#    input:
#      user_agent_string: 'Mozilla/5.0 (One/111; Two/222; Three/333; Four/444)'
#    expected:
#          Equals: "333"
#          StartsT: "222"
#          StartsTh: "333"
#          StartsThr: "333"

- matcher:
    options:
      - 'verbose'
    extract:
      - 'One:   1:  agent.(1)product.(1)name[1]'

- matcher:
    options:
      - 'verbose'
    extract:
      - 'Two:   1:  agent.(1)product.(1)name[2]'

- matcher:
    options:
      - 'verbose'
    extract:
      - 'OneTwo:     1:  agent.(1)product.(1)name[1-2]'

- matcher:
    options:
      - 'verbose'
    extract:
      - 'TwoThree:   1:  agent.(1)product.(1)name[2-3]'

- matcher:
    options:
      - 'verbose'
    extract:
      - 'TwoThreeFour:   1:  agent.(1)product.(1)name[2-4]'

- matcher:
    options:
      - 'verbose'
    extract:
      - 'ThreeFourFive:   1:  agent.(1)product.(1)name[3-5]'

- matcher:
    options:
      - 'verbose'
    extract:
      - 'FourFive:   1:  agent.(1)product.(1)name[4-5]'

- test:
    options:
      - 'verbose'
    input:
      user_agent_string: 'One Two Three Four Five Six/1.0 (Something)'
    expected:
      One:           "One"
      Two:           "Two"
      OneTwo:        "One Two"
      TwoThree:      "Two Three"
      TwoThreeFour:  "Two Three Four"
      ThreeFourFive: "Three Four Five"
      FourFive:      "Four Five"
